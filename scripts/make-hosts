#!/bin/bash

hostsfile="/etc/hosts"
backup="/etc/hosts-original"
tempfile="/run/shm/hosts-$RANDOM"

signature="#created by make-hosts"

restore="false"
nobackup="false"
refresh="false"

subnetlan="192.168.0.0/24"
subnetvpn="10.0.0.0/24"

function getsubneturl {
	echo "http://vpn.bismith.net/subnets/subnet-$(echo $1 | tr '/' '-').txt"
}

while [[ $# > 0 ]]; do
	arg="$1"
	case $arg in
		-s)
		subnetlan="$2"
		shift
		;;
		-v)
		subnetvpn="$2"
		shift
		;;
		--refresh)
		refresh="true"
		;;
		--nobackup)
		nobackup="true"
		;;
		--restore)
		restore="true"
		;;
		*)
		# unknown option
		;;
	esac
	shift # past argument or value
done

#if [ -z "$(which nmap)" ]; then
#	echo "ERROR: you need nmap installed"
#	echo "make sure that nmap is installed and in your path"
#	exit 1
#fi

if [ -z "$(which curl)" ]; then
	echo "ERROR: you need curl installed"
	echo "make sure that curl is installed and in your path"
	exit 1
fi

if [ "$restore" == true ]; then
	if [ ! -e "$backup" ]; then
		echo "ERROR: $backup does not exist, can't restore it!"
		exit 1
	fi
	sudo rm $hostsfile
	sudo mv $backup $hostsfile
else
	if [ -e "$backup" ] && [ "$nobackup" == false ]; then
		echo "ERROR: cannot continue while there is an existing backup at $backup"
		echo "To restore $hostsfile from that backup, run make-hosts --restore"
		echo "To throw all caution to the wind and do it anyway, run make-hosts --nobackup"
		exit 1
	else
		if [ "$nobackup" == false ]; then
			sudo cp $hostsfile $backup
		fi
		echo "$signature" >> $tempfile
		printf "\n\n" >> $tempfile
		cat $hostsfile >> $tempfile
		printf "\n\n" >> $tempfile

		curl http://vpn.bismith.net/subnets/vpn.txt 2> /dev/null >> $tempfile
		if [ "$?" -ne "0" ]; then
			echo "ERROR: unable to fetch subnet information"
			exit 1
		fi
		curl http://vpn.bismith.net/subnets/apt.txt 2> /dev/null >> $tempfile
		if [ "$?" -ne "0" ]; then
			echo "ERROR: unable to fetch subnet information"
			exit 1
		fi
		curl http://vpn.bismith.net/subnets/home.txt 2> /dev/null >> $tempfile
		if [ "$?" -ne "0" ]; then
			echo "ERROR: unable to fetch subnet information"
			exit 1
		fi

#		for subnet in $(echo $subnetlan; echo $subnetvpn); do
#			subneturl="$(getsubneturl $subnet)"
#			content="$(curl $subneturl 2> /dev/null)"
#			if [ "$refresh" == false ] && [ -n "$content" ]; then
#				echo "using cache for subnet $subnet"
#				echo "subneturl: $subneturl"
#				printf "\n"
#				echo "$content" >> $tempfile
#			else
#
#				echo "scanning subnet $subnet ..."
#				all=""
#				nmapout=$(nmap -sP "$subnet")
#				echo
#				while read line; do
#					echo "$line"
#					if [ "$(echo $line | colrm 21)" == "Nmap scan report for" ]; then
#						addr=$(echo $line | rev | awk '{print $1}' | rev | tr -d '()')
#						if [ -n "$all" ]; then
#							all="$all $addr"
#						else
#							all=$addr
#						fi
#					fi
#				done <<< "$nmapout"
#				for addr in $(echo $all | tr ' ' '\n'); do
#					echo "checking: $addr"
#					hostname=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes $addr "hostname" | tr '[:upper:]' '[:lower:]')
#					if [ -n "$hostname" ]; then
#						echo "found hostname: $hostname"
#						tld="local"
#						if [ "$subnet" == "$subnetvpn" ]; then
#							tld="vpn"
#						fi
#						echo "adding entry as $hostname.$tld"
#						echo -e "$addr\t$hostname.$tld" >> $tempfile
#					else
#						echo "hostname not found"
#					fi
#					echo
#				done
#			fi
#		done


#		read -p "Press enter to review the changes to $hostsfile ..."
#		less $tempfile
#		echo "You are about to replace $hostsfile"
#		while true; do
#		read -p "Do you wish to commit the changes? [y/n]:" yn
#			case $yn in
#				[Yy]* ) break;;
#				[Nn]* ) echo "not changing $hostsfile, exiting ..."; rm $tempfile; exit;;
#				* ) echo "Please answer yes or no.";;
#			esac
#		done

		sudo rm $hostsfile
		sudo cp $tempfile $hostsfile
		rm $tempfile
	fi
fi

sudo chmod 644 $hostsfile

